{"version":3,"sources":["components/MessageCopy.js","hooks/useEventListener.js","utils/constants.js","utils/helpers.js","components/Palette/PaletteCard.js","components/Palette/Palette.js","components/Button.js","App.js","index.js"],"names":["MessageCopy","color","className","useEventListener","eventName","handler","element","window","savedHandler","useRef","useEffect","current","eventListener","event","addEventListener","removeEventListener","SPACE_KEYS","C_KEYS","decToHex","value","toString","padStart","toUpperCase","copyToClipboard","toCopy","navigator","clipboard","writeText","PaletteCard","action","hexColor","displayedColor","onClick","e","style","Palette","palette","handleClick","useState","showResults","setShowResults","clickedColor","setClickedColor","copyColorToClipboard","currentColor","target","parentElement","innerText","timerForShowResults","arrayPalette","timer","setTimeout","clearTimeout","key","includes","String","map","item","r","g","b","backgroundColor","push","Button","text","styleButton","App","setPalette","click","setClick","data","model","callback","http","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","result","undefined","open","send","stringify","getData","err","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d6d5831.chunk.js","sourcesContent":["import React from \"react\";\n\nconst MessageCopy = ({ color }) => {\n  return (\n    <div className=\"attention attention--top\">\n      Color <span>{color ? color : \"palette\"}</span> copied to your clipboard\n    </div>\n  );\n};\n\nexport default MessageCopy;\n","import { useEffect, useRef } from \"react\";\n\nconst useEventListener = (eventName, handler, element = window) => {\n  const savedHandler = useRef();\n\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(() => {\n    const eventListener = (event) => savedHandler.current(event);\n    element.addEventListener(eventName, eventListener);\n    return () => {\n      element.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element]);\n};\n\nexport default useEventListener;\n","export const SPACE_KEYS = [\"32\", \" \"];\nexport const C_KEYS = [\"67\", \"c\"];","export const decToHex = (value) => {\n  return value.toString(16).padStart(2, \"0\").toUpperCase();\n};\n\nexport const rgbToHex = (r, g, b) => {\n  return \"#\" + decToHex(r) + decToHex(g) + decToHex(b);\n};\n\nexport const copyToClipboard = (toCopy) => {\n  navigator.clipboard.writeText(toCopy);\n};\n","import React from \"react\";\n\nfunction PaletteCard({ action, hexColor, displayedColor }) {\n  return (\n    <>\n      <div\n        className=\"palette__card\"\n        onClick={(e) => {\n          action(e);\n        }}\n      >\n        <div className=\"palette__card-color\" style={displayedColor}></div>\n        <span>{hexColor}</span>\n      </div>\n    </>\n  );\n}\n\nexport default PaletteCard;\n","import React, { useState } from \"react\";\nimport MessageCopy from \"../MessageCopy\";\nimport useEventListener from \"../../hooks/useEventListener\";\nimport { SPACE_KEYS, C_KEYS } from \"../../utils/constants\";\nimport { rgbToHex, copyToClipboard } from \"../../utils/helpers\";\nimport PaletteCard from \"./PaletteCard\";\n\nconst Palette = ({ palette, handleClick }) => {\n  const [showResults, setShowResults] = useState(false);\n  const [clickedColor, setClickedColor] = useState(\"\");\n\n  const copyColorToClipboard = (e) => {\n    let currentColor = e.target.parentElement.innerText;\n    setClickedColor(currentColor);\n    copyToClipboard(currentColor);\n    timerForShowResults();\n  };\n\n  let arrayPalette = [];\n\n  const getArrayFromPalette = (newArr) => {\n    return newArr;\n  };\n\n  const timerForShowResults = () => {\n    setShowResults(true);\n    const timer = setTimeout(() => {\n      setShowResults(false);\n    }, 2000);\n    return () => clearTimeout(timer);\n  };\n\n  const handler = ({ key }) => {\n    if (SPACE_KEYS.includes(String(key))) {\n      handleClick();\n    }\n    if (C_KEYS.includes(String(key))) {\n      copyToClipboard(arrayPalette);\n      setClickedColor(\"\");\n      timerForShowResults();\n    }\n  };\n\n  useEventListener(\"keydown\", handler);\n\n  return (\n    <>\n      {showResults ? (\n        <MessageCopy color={clickedColor} arrayPalette={arrayPalette} />\n      ) : null}\n      <div className=\"palette\">\n        {palette.map((item) => {\n          let hexColor = rgbToHex(item[0], item[1], item[2]);\n          let displayedColor = { backgroundColor: `${hexColor}` };\n          arrayPalette.push(hexColor);\n          getArrayFromPalette(arrayPalette);\n\n          return (\n            <div key={item}>\n              <PaletteCard\n                action={copyColorToClipboard}\n                displayedColor={displayedColor}\n                hexColor={hexColor}\n              />\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default Palette;\n","import React from \"react\";\n\nfunction Button({ handleClick, text, styleButton }) {\n  return (\n    <button className={styleButton} onClick={handleClick}>\n      {text}\n    </button>\n  );\n}\n\nexport default Button;\n","import React, { useState, useEffect } from \"react\";\nimport Palette from \"./components/Palette/Palette\";\nimport \"./style/main.scss\";\nimport Button from \"./components/Button\";\n\nfunction App() {\n  const [palette, setPalette] = useState([]);\n  const [click, setClick] = useState(false);\n  let url = \"http://colormind.io/api/\";\n  let data = {\n    model: \"default\",\n  };\n\n  const getData = (callback) => {\n    const http = new XMLHttpRequest();\n    http.onreadystatechange = function () {\n      if (http.readyState === 4 && http.status === 200) {\n        let data = JSON.parse(http.responseText).result;\n        callback(undefined, data);\n      } else if (http.readyState === 4) {\n        callback(\"could not fetch the data\", undefined);\n      }\n    };\n    http.open(\"POST\", url);\n    http.send(JSON.stringify(data));\n  };\n\n  useEffect(() => {\n    getData((err, data) => {\n      setPalette(data);\n      if (err) {\n        console.log(err);\n      }\n    });\n  }, [click]);\n\n  const handleClick = () => {\n    setClick(!click);\n  };\n\n  return (\n    <main className=\"main\">\n      <div className=\"container\">\n        <h1>Color palette generator</h1>\n        <Palette palette={palette} handleClick={handleClick} />\n        <Button\n          handleClick={handleClick}\n          styleButton={\"btn btn--blue\"}\n          text={\"Generate palette\"}\n        />\n        <p>Or just press the \"Spacebar\" to generate new palettes</p>\n        <div className=\"attention attention--bottom\">\n          Click to copy individual color &middot; Press \"C\" to copy palette\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}